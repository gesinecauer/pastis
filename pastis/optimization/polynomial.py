import sys

if sys.version_info[0] < 3:
    raise Exception("Must be using Python 3")

import numpy as np

from .utils_poisson import _setup_jax
_setup_jax()
import jax.numpy as jnp
from .utils_poisson import jax_min, jax_max


def _polyval(x, c, unroll=128):
    """Wraps jax.numpy.polyval using default unroll=128.

    See https://jax.readthedocs.io/en/latest/_autosummary/jax.numpy.polyval.html
    for description of unroll parameter."""

    return jnp.polyval(c, x, unroll=unroll)


def _polygrid2d(c, *args):
    """Jax-friendly version of np.polynomial.polynomial.polygrid2d.

    Note: jax.numpy.polyval uses flipped coefs, as does this function."""

    for xi in args:
        if isinstance(xi, (tuple, list)):
            xi = jnp.asarray(xi)
        if isinstance(xi, (jnp.ndarray, np.ndarray)):
            c = c.reshape(c.shape + (1,) * xi.ndim)
        c = _polyval(xi, c)
    return c


def _approx_ln_f(dis, epsilon, alpha, inferring_alpha=False,
                 min_epsilon_over_dis=1e-3, max_epsilon_over_dis=25, mods=[]):
    """Helper function for estimating the distribution between full-res beads.

    Corresponds to m(alpha, epsilon) and v(alpha, epsilon) in Cauer et al., 2023
    """

    epsilon_over_dis = epsilon / dis
    epsilon_over_dis = jax_max(epsilon_over_dis, min_epsilon_over_dis)
    epsilon_over_dis = jax_min(epsilon_over_dis, max_epsilon_over_dis)

    log_epsilon_over_dis = jnp.log(epsilon_over_dis)

    if (not inferring_alpha) and alpha == -3:
        ln_f_mean = _polyval(log_epsilon_over_dis, c=coefs_mean_alpha_minus3)
        ln_f_var = _polyval(log_epsilon_over_dis, c=coefs_var_alpha_minus3)
    else:
        ln_f_mean = _polygrid2d(coefs_mean, log_epsilon_over_dis, alpha)
        ln_f_var = _polygrid2d(coefs_var, log_epsilon_over_dis, alpha)

    return ln_f_mean, ln_f_var


# ================ POLYFIT COEFS FROM MULTIRES SIMULATION ================

# For use in using the distances between low-res beads ("dis") and epsilon
# to estimate the mean & variance of full-res lambda_{ij}

# Apply coefs to log(epsilon_over_dis)
# Coefs were fit via simulations where min(fullres_dis) = 0.5
# (These coefs are flipped for use with numpy.polyval or jax.numpy.polyval)

# 1D polyfit coefs for alpha=-3 (degree=10)
coefs_mean_alpha_minus3 = np.array([
    1.5596073433917893e-06, 3.2620631488453274e-05, 0.00016463647909964506,
    -0.0007106011663149201, -0.007093818737731484, 0.0008450452323096411,
    0.09866938076438023, 0.04593886763105599, -0.8280920323069436,
    -1.4597817710384067, -0.4186793292698835])
coefs_var_alpha_minus3 = np.array([
    6.785535786260004e-07, 2.5465203313866906e-05, 0.0002693630516037337,
    0.0002922335763135698, -0.008895686550510727, -0.026232395913149353,
    0.11427103692416216, 0.31926085489852724, -1.2231132550595873,
    -1.7139620396967072, 0.7021763995509929])

# 2D polyfit coefs for any alpha between -4 and -1 (degree=XXX)
coefs_mean = np.array([
    0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5.492509178200108e-07, 0, 0, 0, 0, 0, 0, 0,
    0, 0, -5.099727237194576e-07, 1.0782513291915058e-05, 0, 0, 0, 0, 0, 0, 0,
    0, 5.797143504474477e-07, -4.1018594205841845e-06, 5.0567768509947105e-05,
    0, 0, 0, 0, 0, 0, 0, 4.759305519334241e-07, 1.5174774572781798e-05,
    7.350196881313677e-05, -0.00019243098218133707, 0, 0, 0, 0, 0, 0,
    -1.883129233126987e-06, -9.953670674806203e-06, 6.461887307204222e-05,
    0.0007289238467683502, -0.0017491297632910333, 0, 0, 0, 0, 0,
    5.249877609453242e-06, 3.67013322189364e-05, 6.207505933205033e-05,
    -0.00010355894258466112, -0.0006732159761856771, -0.0002290356595988895, 0,
    0, 0, 0, 7.595938352668113e-06, 0.00019686162112872321,
    0.0016043094146914482, 0.005689982253575487, 0.007614558570475318,
    -0.012112486150563668, 0.017979820695154212, 0, 0, 0,
    -4.9821424678372156e-05, -0.0007766726670391929, -0.004537246503035846,
    -0.011528201486641904, -0.009356855267843208, 0.0060439144565904174,
    0.007833031111622906, 0.020680634225567266, 0, 0, -3.509545602052786e-06,
    -0.000540607538919302, -0.00853547156598157, -0.058035315158057495,
    -0.21276883192976817, -0.45390975104172454, -0.5479132749353002,
    -0.10623513721422645, -0.13306977445836493, 0, 0.00015381639375496823,
    0.003431123913965144, 0.03254609456298777, 0.1711323357100756,
    0.5434956527629091, 1.0550207778466212, 1.1750558854489022,
    0.6757851566434587, 0.6989716757922606, -0.08805944064008944,
    -6.435158291129529e-05, -0.0009686117770951993, -0.0033853005889071487,
    0.027433736820245625, 0.32834494251375307, 1.5467656700792114,
    4.189187180184349, 6.966977204080166, 7.118263674594365, 4.424662936070205,
    0.9392276572198854]).reshape(11, 11)
coefs_var = np.array([
    0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8.031206965973229e-07, 0, 0, 0, 0, 0, 0, 0,
    0, 0, -1.616538462571731e-06, 1.6742141795816445e-05, 0, 0, 0, 0, 0, 0, 0,
    0, 1.7346553167210997e-08, -2.871342232161159e-05, 8.354006173712697e-05, 0,
    0, 0, 0, 0, 0, 0, -4.4318613028259235e-07, -5.645962785843439e-06,
    -0.00010915727030012398, -0.00040970833927519106, 0, 0, 0, 0, 0, 0,
    3.2364943715068995e-06, 2.1889203492560937e-05, -1.5854574573696416e-05,
    0.0005600924378158276, -0.004247036322731802, 0, 0, 0, 0, 0,
    1.514243497762804e-05, 0.000247271343285257, 0.0014104732513997242,
    0.00320744368268405, 0.005743480302536567, -0.0002144033639100599, 0, 0, 0,
    0, -1.9025065541713087e-05, -9.153405762280892e-05, 0.0010405258322793353,
    0.009698142618244003, 0.029436244452299795, 0.02440885944891061,
    0.077973955753741, 0, 0, 0, -0.00015094525672921486, -0.0029414864212888173,
    -0.02331729595022911, -0.09655910576414665, -0.21978511803678613,
    -0.2538777552294444, -0.13976035674926404, 0.07037275660618039, 0, 0,
    -0.0001752744720830237, -0.004956006336814045, -0.05673882751808113,
    -0.3506627661078441, -1.2905827413387618, -2.887368051744623,
    -3.7420525505783298, -2.2548533877881836, -1.271961458405734, 0,
    0.00027364165772017, 0.005026660287848924, 0.03524892750391069,
    0.09929549380967878, -0.08067477813730792, -1.4156906460558676,
    -4.360158308392009, -6.355883803771169, -3.829729314734221,
    -1.2126177373895395, 0.0008306866073866559, 0.021830033265459407,
    0.2522808357068256, 1.6879426547449166, 7.237039974820016,
    20.751412272299103, 40.18680785060106, 51.55055382836003, 41.24115988045529,
    16.53495011341175, -0.3706000634385645]).reshape(11, 11)
