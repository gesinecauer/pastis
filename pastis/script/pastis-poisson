#! /usr/bin/env python

from pastis.optimization.pastis_algorithms import pastis_poisson
import argparse


parser = argparse.ArgumentParser(
    description="Run PASTIS-PM1 or PASTIS-PM2 on diploid organisms.",
    fromfile_prefix_chars='@', prog="PASTIS")
parser.add_argument("--counts", nargs="+", type=str, required=True,
                    help="Counts data files in the hiclib format or as"
                         " numpy ndarrays.")
parser.add_argument("--lengths", nargs="+", type=str, required=True,
                    help="Number of beads.")
parser.add_argument("--outdir", type=str, default="",
                    help="Directory in which to save results")
parser.add_argument("--seed", default=0, type=int,
                    help="Random seed used when generating the starting point"
                         " in the optimization.")
parser.add_argument("--alpha", type=float, default=None,
                    help="Biophysical parameter of the transfer function used"
                         " in converting counts to wish distances. If alpha is"
                         " not specified, it will be inferred jointly alongside"
                         " the structure via a coordinate descent approach"
                         " (first inferring a structure with fixed alpha, then"
                         " alpha with fixed structure, etc).")


parser.add_argument("--alpha_init", type=float, default=-1.,
                    help="When inferring alpha, this is the initial value of"
                         " alpha to use. (default = -1).")
parser.add_argument("--max_alpha_loop", type=int, default=20,
                    help="When inferring alpha, this is the maximum number of"
                         " cycles in which PASTIS will infer the alpha (with a"
                         " fixed structure) and then the structure (with a"
                         " fixed alpha). (default=20)")

parser.add_argument("--init", default="mds", type=str, help="")
parser.add_argument('--exclude_zeros', default=False,
                    action='store_true', help="")


# Optimization convergence
parser.add_argument("--max_iter", default=30000, type=int,
                    help="Maximum number of iterations per optimization.")
parser.add_argument("--factr", default=10000000.0, type=float,
                    help="factr for scipy's L-BFGS-B, alters convergence"
                         " criteria")
parser.add_argument("--pgtol", default=1e-05, type=float,
                    help="pgtol for scipy's L-BFGS-B, alters convergence"
                         " criteria")
parser.add_argument("--alpha_factr", default=1000000000000., type=float,
                    help="factr for convergence criteria of joint"
                         " alpha/structure inference")


# For simulation
parser.add_argument("--beta", nargs="+", default=None, type=float,
                    help="Scaling parameter that determines the size of the"
                         " structure, relative to the read depth of the counts."
                         " matrix. If None, an arbitrary beta will be chosen.")
parser.add_argument("--alpha_true", type=float, default=None,
                    help=argparse.SUPPRESS)
parser.add_argument("--struct_true", type=str, default=None,
                    help=argparse.SUPPRESS)





pastis_poisson(**vars(parser.parse_args()))
