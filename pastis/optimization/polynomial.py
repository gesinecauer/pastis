import sys
import numpy as np

if sys.version_info[0] < 3:
    raise Exception("Must be using Python 3")

from .utils_poisson import _setup_jax
_setup_jax()
import jax.numpy as ag_np
from .utils_poisson import relu_min, relu_max


def _polyval_old(x, c):  # TODO remove
    """Analagous to np.polyval (which is not differentiable with jax)"""
    ans = 0
    power = len(c) - 1
    for coef in c:
        ans = ans + coef * ag_np.power(x, power)
        power = power - 1
    return ans


def _polyval_np(x, c, tensor=True):
    """Analagous to np.polynomial.polynomial.polyval (which is not
    differentiable with jax)"""

    c = ag_np.flip(ag_np.array(c, ndmin=1, copy=False))
    if c.dtype.char in '?bBhHiIlLqQpP':
        # astype fails with NA
        c = c + 0.0
    if isinstance(x, (tuple, list)):
        x = ag_np.asarray(x)
    if isinstance(x, ag_np.ndarray) and tensor:
        c = c.reshape(c.shape + (1,) * x.ndim)

    c0 = c[-1] + x * 0
    for i in range(2, len(c) + 1):
        c0 = c[-i] + c0 * x
    return c0


def _polyval(x, c, unroll=128):
    res = ag_np.polyval(c, x, unroll=unroll)
    # test = _polyval_np(x, c)
    # if not ag_np.allclose(res, test):
    #     print('drats!'); exit(1)
    return res


def _polygrid2d(c, *args):
    """Analagous to np.polynomial.polynomial.polygrid2d (which is not
    differentiable with jax)
    Note: jax.numpy.polyval uses flipped coefs"""

    for xi in args:
        if isinstance(xi, (tuple, list)):
            xi = ag_np.asarray(xi)
        if isinstance(xi, ag_np.ndarray):
            c = c.reshape(c.shape + (1,) * xi.ndim)
        # c = _polyval(xi, c)
        c = ag_np.polyval(c, xi, unroll=128)
    return c


def _approx_ln_f_mean(epsilon_over_dis, alpha, inferring_alpha=False):
    """TODO"""
    if alpha == -3 and not inferring_alpha:
        ln_f_mean = _polyval(epsilon_over_dis, c=coefs_mean_alpha_minus3)
    else:
        ln_f_mean = _polygrid2d(coefs_mean, epsilon_over_dis, alpha)
    return ln_f_mean


def _approx_ln_f_var(epsilon_over_dis, alpha, inferring_alpha=False):
    """TODO"""
    if alpha == -3 and not inferring_alpha:
        ln_f_var = _polyval(epsilon_over_dis, c=coefs_var_alpha_minus3)
    else:
        ln_f_var = _polygrid2d(coefs_var, epsilon_over_dis, alpha)
    return ln_f_var


def _approx_ln_f(dis, epsilon, alpha, inferring_alpha=False,
                 return_mean=True, return_var=True,
                 min_epsilon_over_dis=1e-3, max_epsilon_over_dis=25, mods=[]):
    """TODO"""

    if not (return_mean or return_var):
        raise ValueError("Must select return_mean or return_var")

    epsilon_over_dis = epsilon / dis
    # TODO temp, verify jax_min, jax_max
    epsilon_over_dis = relu_max(epsilon_over_dis, min_epsilon_over_dis)
    epsilon_over_dis = relu_min(epsilon_over_dis, max_epsilon_over_dis)

    # if 'c_log_eps' in mods:
    epsilon_over_dis = ag_np.log(epsilon_over_dis)

    ln_f_mean = ln_f_var = None
    if return_mean:
        ln_f_mean = _approx_ln_f_mean(
            epsilon_over_dis, alpha=alpha, inferring_alpha=inferring_alpha)
    if return_var:
        ln_f_var = _approx_ln_f_var(
            epsilon_over_dis, alpha=alpha, inferring_alpha=inferring_alpha)

    return ln_f_mean, ln_f_var


# # COEFS FOR LOGGED EPS, AT MIN_DIS=0.30 (Flipped coefs - for numpy.polyval or jax.numpy.polyval)
# coefs_mean_alpha_minus3 = np.array([
#     -1.902409229632921e-08, 2.4277813518027493e-06, 5.58637077317656e-05,
#     0.0002887252331842304, -0.001198618510682184, -0.011911945954403641,
#     0.0015417844571146457, 0.15554567460471252, 0.07057114733217232,
#     -1.078964028724517, -1.4987049815290208, -0.02530567181773051])
# coefs_var_alpha_minus3 = np.array([
#     -1.8754924189121214e-06, -3.5753726035830944e-05, -0.00011785401029314882,
#     0.001348343421852647, 0.007368909276903568, -0.01921098266790007,
#     -0.1263781375840444, 0.16929168149976806, 0.8484688386172228,
#     -1.5769310179616627, -2.2040780211863273, 2.503574802566482])


# COEFS FOR LOGGED EPS, AT MIN_DIS=0.50 (Flipped coefs - for numpy.polyval or jax.numpy.polyval)
coefs_mean_alpha_minus3 = np.array([
    1.5596073433917893e-06, 3.2620631488453274e-05, 0.00016463647909964506,
    -0.0007106011663149201, -0.007093818737731484, 0.0008450452323096411,
    0.09866938076438023, 0.04593886763105599, -0.8280920323069436,
    -1.4597817710384067, -0.4186793292698835])
coefs_var_alpha_minus3 = np.array([
    6.785535786260004e-07, 2.5465203313866906e-05, 0.0002693630516037337,
    0.0002922335763135698, -0.008895686550510727, -0.026232395913149353,
    0.11427103692416216, 0.31926085489852724, -1.2231132550595873,
    -1.7139620396967072, 0.7021763995509929])


# # COEFS FOR LOGGED EPS, AT MIN_DIS=0.75 (Flipped coefs - for numpy.polyval or jax.numpy.polyval)
# coefs_mean_alpha_minus3 = np.array([
#     -1.1264159485878654e-05, -0.00021211466931803232, -0.0008929034023644916,
#     0.004648648913915445, 0.03556901105577666, -0.024943566242962976,
#     -0.5891057076318718, -1.3067239006615927, -0.8064501768741511])
# coefs_var_alpha_minus3 = np.array([
#     -3.6522088878065173e-06, -9.931334696633212e-05, -0.0007524512804288317,
#     0.0013021005476717767, 0.03386970195541201, 0.02930637094892996,
#     -0.8263326715984863, -1.1536400998969882, -0.9664627879613069])


# # OLD: COEFS AT MIN_DIS=0.75, step=0.01 (Flipped coefs - for numpy.polyval or jax.numpy.polyval)
# coefs_mean_alpha_minus3 = np.array([
#     3.464910905671502e-21, -1.0105330140556754e-18, 1.3588432032239812e-16,
#     -1.116734629634639e-14, 6.26738289284591e-13, -2.5414932046290733e-11,
#     7.680552481549199e-10, -1.7570749107296444e-08, 3.0546225029944155e-07,
#     -4.00076588253835e-06, 3.83791257879288e-05, -0.0002499438818476446,
#     0.0008213129731700115, 0.002508013090015568, -0.049377769858972,
#     0.31266990391867966, -1.1651649253823175, 2.697171579738909,
#     -3.5474189741970537, 0.9631997031228418, -0.023201999424760977])
# coefs_var_alpha_minus3 = np.array([
#     -5.97023887425092e-19, 1.7776006695783766e-16, -2.4489252959928776e-14,
#     2.0712742890935158e-12, -1.2033761798995322e-10, 5.091233799588624e-09,
#     -1.622555942878737e-07, 3.974677742184128e-06, -7.5699765116612e-05,
#     0.0011266223273035483, -0.013100852478020703, 0.1184528975601993,
#     -0.8247361044581443, 4.355886123351723, -17.079975459775696,
#     48.258809499907386, -94.28044351057122, 120.21159309995166,
#     -91.92785707061279, 35.58750937313276, -5.539537195582062])


# # OLD: COEFS AT MIN_DIS=1.0 (Flipped coefs - for numpy.polyval or jax.numpy.polyval)
# coefs_mean_alpha_minus3 = np.array([
#     1.085530159335611e-20, -3.2569928363684048e-18, 4.523996722078642e-16,
#     -3.860172472697894e-14, 2.264018591473971e-12, -9.676735365336366e-11,
#     3.1180354826296848e-09, -7.729187821982882e-08, 1.4909649698165356e-06,
#     -2.2494275583988604e-05, 0.00026535550493821596, -0.0024346932032318636,
#     0.017191146900317863, -0.09182587965659708, 0.3614522325136445,
#     -1.0066559945186715, 1.8524262217734828, -1.971536924656934,
#     0.9313255565948294, -1.2139880441251267, -0.0002117813277644487])
# coefs_var_alpha_minus3 = np.array([
#     -1.051788041871622e-19, 3.149317271821116e-17, -4.365370951694794e-15,
#     3.717074477523274e-13, -2.1756229220787193e-11, 9.280733157120706e-10,
#     -2.985167359090674e-08, 7.389419991779146e-07, -1.4242988374625547e-05,
#     0.00021494017527089683, -0.002540688344728421, 0.02342840374634108,
#     -0.16711414785776244, 0.9099946294389019, -3.7134359175946288,
#     11.077775686028529, -23.391503472531646, 33.55087569239162,
#     -30.90327637708739, 15.602130154185575, -5.236143246007488])


# # OLD: COEFS AT MIN_DIS=0.1 (Flipped coefs - for numpy.polyval or jax.numpy.polyval)
# coefs_mean_alpha_minus3 = np.array([
#     2.384889405283926e-19, -7.092176813903788e-17, 9.755240971424562e-15,
#     -8.234401886270017e-13, 4.771986312755773e-11, -2.0125096836621353e-09,
#     6.388048063919624e-08, -1.5568760830574136e-06, 2.9458520998445332e-05,
#     -0.00043473450070049445, 0.004999412131685746, -0.044533629956350386,
#     0.3037613728357651, -1.5579987763196463, 5.847781752354766,
#     -15.41602379682049, 26.715281945473357, -26.878052612326133,
#     11.2376461876378, 0.28700351325658263, -0.048535276163822694])
# coefs_var_alpha_minus3 = np.array([
#     -1.9596564590024882e-19, 5.9904949426039e-17, -8.492150352639023e-15,
#     7.40970454923176e-13, -4.4540258172889294e-11, 1.9562311215047334e-09,
#     -6.497268290517421e-08, 1.6662341277899646e-06, -3.3399983581381825e-05,
#     0.0005264930722264268, -0.006533769921629223, 0.06362682108289178,
#     -0.48252249119101376, 2.8147698408958486, -12.406097503138406,
#     40.289842691820795, -93.08411790405903, 145.44163459840573,
#     -141.9751858971147, 73.75640023481249, -8.58479540584066])


# OLD: COEFS AT MIN_DIS=0.5 (Flipped coefs - for numpy.polyval or jax.numpy.polyval)
# coefs_mean_alpha_minus3 = np.array([
#     7.222621297713678e-20, -2.1435189438270842e-17, 2.9417092821278008e-15,
#     -2.476733232328295e-13, 1.4311188449340554e-11, -6.015221660782645e-10,
#     1.9018596428284558e-08, -4.61375227636075e-07, 8.681630478552977e-06,
#     -0.0001272534419016317, 0.0014510428742666398, -0.012785073537971115,
#     0.08594056571967137, -0.4318193807783164, 1.5713138125394583,
#     -3.9334072954891717, 6.155938632438331, -4.685909281043588,
#     -0.32729806977188536, 1.1719218436242866, -0.028093639636097123])
# coefs_var_alpha_minus3 = np.array([
#     -2.826363458904606e-19, 8.475242868614452e-17, -1.1766620047887206e-14,
#     1.0036794797646503e-12, -5.885998889253996e-11, 2.516252660796367e-09,
#     -8.113042129252535e-08, 2.0136914201551016e-06, -3.893079982682449e-05,
#     0.0005894922958888848, -0.006994391047513398, 0.0647656216346739,
#     -0.46402725599788086, 2.5380564896792945, -10.396078175527533,
#     31.056127374847637, -65.25095014247461, 91.65570996949957,
#     -79.67621276833034, 36.06555533545901, -5.021597182678841])
coefs_mean = np.array([
    0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    2.438487559255731e-21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1.6649159559950122e-20, -7.035983318471517e-19, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.2363474199681624e-21,
    -4.739896225270144e-18, 9.351807473166418e-17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, -4.712587000543612e-19, -3.689753470941997e-18,
    6.135395301732437e-16, -7.594808784123117e-15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1.4946231431513455e-18, 1.3632654384543954e-16,
    9.575070199316931e-16, -4.762962889566796e-14, 4.2161619167053685e-13, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.162666301937544e-17,
    -2.1347689923224099e-16, -1.7168888121169984e-14, -1.156161816970737e-13,
    2.4603656999334466e-12, -1.6965073118733544e-11, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1.193378544151367e-16, -8.427469255693466e-16,
    1.6961155189365216e-14, 1.282046249747997e-12, 8.438659309076168e-12,
    -8.844244198726533e-11, 5.122792912096855e-10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, -3.963178137610622e-15, -9.496805393515098e-14,
    -6.205125875679577e-13, -3.4901315048658147e-12, -6.986680332343896e-11,
    -4.2246267345554857e-10, 2.2264477801597405e-09, -1.186983566152844e-08, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3.018095765772988e-15,
    8.44046952514599e-13, 1.669073651234945e-11, 1.2289558191432446e-10,
    5.283647756801747e-10, 3.3982458967959364e-09, 1.6004259195450744e-08,
    -3.709525075441031e-08, 2.1448135039046517e-07, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 4.2375191100479585e-13, 8.917247708396598e-12, 1.2169644796971527e-11,
    -9.284261107089257e-10, -8.882708293042669e-09, -3.9499172033379805e-08,
    -1.5064843176530492e-07, -4.964204654774634e-07, 2.8450849480926993e-07,
    -3.0710754161146394e-06, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    -8.415359575858895e-13, -9.088975413522351e-11, -1.7485619754956874e-09,
    -1.2231423240777122e-08, -1.548119391610499e-08, 2.3727149401359583e-07,
    1.4946934885964155e-06, 5.098665244177931e-06, 1.2786614977949935e-05,
    4.385053761755929e-06, 3.568954143421943e-05, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    -3.3844623294633575e-11, -7.977977995885786e-10, -3.1222096065526187e-09,
    6.331247748760988e-08, 7.671784471433346e-07, 3.1452509399647762e-06,
    2.296585123313935e-06, -2.491341550483525e-05, -0.00011100416483823403,
    -0.00025538434136593464, -0.00019400353012680944, -0.000349754346491058, 0,
    0, 0, 0, 0, 0, 0, 0, -2.940864970131849e-11, 3.529671348532421e-09,
    1.0037834649892897e-07, 9.667515481543055e-07, 3.3305603463367924e-06,
    -6.785931202620165e-06, -8.833796889245012e-05, -0.00023767217457571887,
    -1.6784213146894764e-05, 0.0013303882843400026, 0.003571574410599203,
    0.0035040689625517674, 0.0030010042560348065, 0, 0, 0, 0, 0, 0, 0,
    1.4190488820734948e-09, 5.0831616850757243e-08, 5.844796928670262e-07,
    1.757940025970515e-06, -1.530932710176775e-05, -0.000140350808825014,
    -0.00033285903994927313, 0.0005925966339589728, 0.004499800945574996,
    0.007076871892768242, -0.004673801514741983, -0.030863829266221464,
    -0.03808774091226303, -0.022253998477700834, 0, 0, 0, 0, 0, 0,
    1.5623730425576247e-08, 4.0602007651539413e-07, 3.8918754847033384e-06,
    1.560065117445004e-05, 2.1445117736251343e-05, 0.00013874924565917824,
    0.0017008521843820904, 0.006490038106857206, 0.0017616146868535648,
    -0.051511881113029706, -0.1416903696927827, -0.11793346806465818,
    0.09628584730140462, 0.23909331291799552, 0.12791514972853688, 0, 0, 0, 0,
    0, 1.0671906187511889e-07, 2.504613003408017e-06, 2.224077662919232e-05,
    7.818952300896141e-05, -9.414352366784486e-05, -0.0020719085702225696,
    -0.01088862812878456, -0.03938691132349216, -0.0898537852670233,
    -0.005365719704239713, 0.6867452079462818, 2.097067043242305,
    2.829383819115618, 1.5165634972962452, -0.3127114838170589,
    -0.41198722511510777, 0, 0, 0, 0, 6.096186481358448e-07,
    1.5128278972363927e-05, 0.0001588298174261444, 0.0009342772249512063,
    0.0036725774860912838, 0.013098303627113585, 0.05578712278174352,
    0.23168646068604484, 0.7050712413900803, 1.1925993222617763,
    -0.5713781152745822, -9.336642362491421, -25.719639510120007,
    -36.972652777390344, -28.902842421745426, -10.148088344342144,
    -0.9526824721958498, 0, 0, 0, 1.7247417282307823e-06,
    3.2631682232107206e-05, 0.00012074454531558965, -0.0021700697841084884,
    -0.031289926491302036, -0.19452943622953872, -0.6602975027450044,
    -0.8272694422523903, 3.6507861633151197, 25.63361583418223,
    87.50414600260876, 209.60146687488142, 382.022938951279, 531.9395370825391,
    541.283314335174, 369.75731568220635, 145.89615730011212,
    24.791178707742638, 0, 0, -3.489558729245653e-06, -0.00019014117907506037,
    -0.0038971527547338944, -0.042713316146588895, -0.2823749247940472,
    -1.1672654706121532, -3.059475481828326, -6.96819671115711,
    -35.30175638174202, -222.62541932429386, -974.8508994347508,
    -2932.341453989038, -6310.681122173678, -9927.799125315476,
    -11427.728979224992, -9426.165070950108, -5289.846064537817,
    -1805.0044286202444, -281.820994459851, 0, 2.617742578064883e-05,
    0.0008208701223469096, 0.010457910240833175, 0.05569059714248769,
    -0.14829721255541112, -4.60613332386254, -35.560453350293294,
    -145.07747403081584, -223.75008957075792, 1070.2373258174846,
    8944.454616267269, 34564.52487070496, 89276.29290116653, 166735.75317226254,
    229921.8612312484, 233001.84976200046, 169167.4632204468, 83407.30860140672,
    25029.73555939138, 3450.647934465504, 0.00012072518086752782,
    0.003768039265327429, 0.04915596464482539, 0.33079127114052514,
    1.115653018904265, 2.5808225525143653, 35.99024805356983, 456.5345065198316,
    3187.373606518205, 14143.930408189903, 42236.72276793955, 82868.5131052689,
    85545.05596803161, -46046.22615976241, -357052.3311481463,
    -714094.0229794475, -860905.5657275007, -684965.4232101972,
    -354188.53575946204, -108504.28336691383, -14997.944735295125]).reshape(21,
    21)
coefs_var = np.array([
    0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    -5.1099981653986056e-20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, -8.084017216067706e-20, 1.5629954217036566e-17, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1.9749324669195624e-19,
    2.2959653358998188e-17, -2.217392075349012e-15, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1.6841650578134394e-18, 6.698311392268977e-17,
    -2.9786877691444313e-15, 1.9367715735224244e-13, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, -1.941813739058875e-17, -6.278077480607116e-16,
    -1.0812807024380738e-14, 2.3259157591163303e-13, -1.1659579101512745e-11, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2.300728969881278e-16,
    7.572646468859132e-15, 1.11718375919598e-13, 1.1093923506326824e-12,
    -1.2067739092269503e-11, 5.132533520642133e-10, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, -3.0881101080149447e-15, -9.854451892534246e-14,
    -1.4479108141373118e-12, -1.2771214193038068e-11, -8.175510542377548e-11,
    4.280246874414541e-10, -1.710713823904797e-08, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 2.6429896024745283e-14, 1.1174115654474237e-12,
    1.8535911417221545e-11, 1.7326498900633474e-10, 1.04709317231956e-09,
    4.630198155809303e-09, -9.868402309993355e-09, 4.412458753491625e-07, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3.438309819329419e-14, -4.518801668939883e-12,
    -1.473905455108691e-10, -1.8936994305171028e-09, -1.3717285941048242e-08,
    -6.362362596074748e-08, -2.0828478420840766e-07, 1.0026456308630153e-07,
    -8.931508169440158e-06, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    -3.021430748946832e-12, -7.417046300525107e-11, -3.3375893052213975e-10,
    6.682518846965074e-09, 1.0543629622755329e-07, 7.100454902725871e-07,
    2.828557996000832e-06, 7.440483436906957e-06, 2.4279377279193e-06,
    0.00014321724380275206, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1.6820348146724793e-11, 9.2307113574711e-10, 1.643404433679899e-08,
    1.2682393128006915e-07, 2.870311280984121e-07, -2.369586696854632e-06,
    -2.225653530468411e-05, -8.79174301923544e-05, -0.00020462031815733793,
    -0.00014118111359629574, -0.0018320976376534205, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1.2618781406526126e-10, 9.093254459370404e-10, -5.762985783213925e-08,
    -1.2351850733007357e-06, -1.07102015420904e-05, -4.5360029325118755e-05,
    -5.9352650563430475e-05, 0.00030767856059759713, 0.0017391316167679786,
    0.004085028280769618, 0.0035266180782184985, 0.01880103714606456, 0, 0, 0,
    0, 0, 0, 0, 0, -7.094990824504277e-10, -3.799897406947159e-08,
    -5.810603227985008e-07, -2.3200329210946616e-06, 2.668870133959832e-05,
    0.00037647496342687394, 0.002025782440593779, 0.005356433786954851,
    0.0040439928838064436, -0.016252251921795278, -0.05345306506980726,
    -0.05432041088872261, -0.15486914055209783, 0, 0, 0, 0, 0, 0, 0,
    -8.09966082723826e-09, -1.795779142911888e-07, -4.5911171374183935e-07,
    1.866338665015662e-05, 0.0001897035172556774, 0.0003121943697566139,
    -0.00555633727053304, -0.04394288754738599, -0.15038321987955527,
    -0.25440752954372214, -0.10841083826359629, 0.3433711845727791,
    0.5070938015854121, 1.0066045427433237, 0, 0, 0, 0, 0, 0,
    -9.261095133205546e-08, -2.450409710293279e-06, -3.0280489666402615e-05,
    -0.0002736177300083413, -0.0022047929018152966, -0.014011170585901615,
    -0.055789122158545715, -0.08591433921601874, 0.29420409932112784,
    1.9133928107739244, 4.504399495208612, 4.960484708376178, 1.141481434247829,
    -2.145562250326127, -4.854505558407423, 0, 0, 0, 0, 0, 2.90979806044008e-07,
    1.9616158643931206e-05, 0.0004633235490811851, 0.006004872243288176,
    0.05102402778763188, 0.3126148091773651, 1.446457597157871,
    5.062413604311055, 12.843233640516436, 21.300864915522972,
    16.520918180194666, -11.365682839615843, -38.94811546841463,
    -30.620474895801756, -3.9020945729358747, 15.125407231914007, 0, 0, 0, 0,
    1.1118854627008611e-05, 0.00043933654225027064, 0.00773267837442143,
    0.0802143624184008, 0.5431844502050237, 2.4790397013386123,
    7.3282926459998725, 10.558179366320704, -15.748477030460544,
    -131.08116829703857, -363.0156756196265, -580.1289836985047,
    -540.1213349077808, -237.07701144691106, 5.326375126078673,
    29.386293214516886, -27.6597096823064, 0, 0, 0, 0.00010454165263611698,
    0.0036855340089469424, 0.057160914996380145, 0.5016712184591023,
    2.5780544065076945, 5.9456203843880715, -16.730507058214148,
    -209.58250837023417, -964.6346073221222, -2815.6811665883447,
    -5729.8207517543515, -8336.91551307683, -8723.598330312221,
    -6645.306166672172, -3853.8543992520304, -1783.1054927968323,
    -585.5185269701863, -43.888713318348806, 0, 0, 0.00042132364806260833,
    0.0129564568038254, 0.16142278196734935, 0.8849484534449858,
    -0.7533973032267804, -46.983039120420784, -362.4313648655237,
    -1545.9483312944928, -3917.832820999084, -4139.8934635413125,
    9807.19340306703, 55093.08179426254, 132090.25625484803, 203534.67427188164,
    216726.37395493078, 160169.56800767078, 79120.29745307147, 23630.3854891235,
    3189.5945010751457, 0, 0.0003682395843183692, 0.005715509652522235,
    -0.05768219062801515, -2.3891710502386916, -30.2778108205388,
    -220.41749546247993, -1040.6103980844396, -3299.217043966162,
    -7186.088272516243, -13097.6799280082, -37398.62028485434,
    -150102.74467807784, -477699.52586689964, -1066452.4361018655,
    -1678413.4406504794, -1869252.8744976814, -1448967.2857035252,
    -746023.766357006, -229801.08541272944, -32063.120702658907,
    -0.0009245916302201024, -0.030890723209039583, -0.43169766165401513,
    -3.1884892517218333, -14.388520978611243, -90.00899020478926,
    -1194.7994974271955, -12563.25887185922, -88267.71204020394,
    -438198.1752490954, -1609240.009669425, -4489257.640875692,
    -9638717.312138528, -15980819.148062272, -20357024.738404192,
    -19649175.15022136, -14015429.756516563, -7083865.545094435,
    -2360463.310545322, -451677.77873356576, -35303.80288571669]).reshape(21,
    21)

# # ORIGINAL COEFS (Flipped coefs - for numpy.polyval or jax.numpy.polyval)
# coefs_mean_alpha_minus3 = np.array([5.549172757571418e-20, -1.6470775119344408e-17, 2.2606861003877433e-15, -1.903579023849604e-13, 1.1000461737635397e-11, -4.6239683202570464e-10, 1.4619806820341588e-08, -3.546250613583712e-07, 6.670958632097694e-06, -9.772260096077662e-05, 0.0011130662843361946, -0.00978764088393751, 0.0655592914191458, -0.3273049894339556, 1.1766273423250435, -2.872565184957617, 4.228635441434826, -2.533538222083517, -1.3991509787571033, 0.5364137375876942, -0.014652303861952376])
# coefs_var_alpha_minus3 = np.array([-8.89723012160453e-20, 2.6939031920163006e-17, -3.780088866833452e-15, 3.262503889748274e-13, -1.9384315351972383e-11, 8.408736957761065e-10, -2.7561824714335875e-08, 6.969965186508444e-07, -1.3766418318829012e-05, 0.00021367122264464005, -0.002609568682021054, 0.025003741308379887, -0.18663053580505512, 1.0728333419317682, -4.671837208672972, 15.062582659039125, -34.8224086368473, 55.041717936059165, -54.63542672952499, 25.766016969084514, -5.116935512532633])
